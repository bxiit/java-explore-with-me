{
  "info": {
    "_postman_id": "603cb7bd-895c-428a-8145-c9fd5aa4d222",
    "name": "Feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "37775149"
  },
  "item": [
    {
      "name": "Success feedbacks",
      "item": [
        {
          "name": "Положительная оценка события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let feedback;\r",
                  "    try {\r",
                  "        const user1 = await api.addUser(rnd.getUser());\r",
                  "\r",
                  "        const user2 = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        const event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
                  "        feedback = rnd.getLikeEventFeedback(event1.id, user2.id);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(feedback),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    })\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {\r",
                  "}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        // выполняем наш скрипт\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "},\r",
                  "    100\r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"При создании отзыва оценка должна быть LIKE\", function () {\r",
                  "    pm.expect(target.feedback).equal(\"LIKE\");\r",
                  "    pm.expect(target.id).not.equal(null);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{$requestBody}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events/feedbacks",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                "feedbacks"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Отрицательная оценка события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let feedback;\r",
                  "    try {\r",
                  "        const user1 = await api.addUser(rnd.getUser());\r",
                  "\r",
                  "        const user2 = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        const event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
                  "        feedback = rnd.getDislikeEventFeedback(event1.id, user2.id);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(feedback),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    })\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {\r",
                  "}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        // выполняем наш скрипт\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "},\r",
                  "    100\r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"При создании отзыва оценка должна быть DISLIKE\", function () {\r",
                  "    pm.expect(target.feedback).equal(\"DISLIKE\");\r",
                  "    pm.expect(target.id).not.equal(null);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{requestBody}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events/feedbacks",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                "feedbacks"
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "     pm.expect(pm.response.code).to.equal(201, \"Ответ должен содержать код статуса 201\");\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Запрос на участие должен содержать поля: id, requester, event, status, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('event');\r",
              "pm.expect(target).to.have.property('feedback');\r",
              "pm.expect(target).to.have.property('user');\r",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Rating",
      "item": [
        {
          "name": "Получение рейтинга события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user1 = await api.addUser(rnd.getUser());\r",
                  "        const user2 = await api.addUser(rnd.getUser());\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "\r",
                  "        const event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
                  "\r",
                  "        const feedback1 = api.addEventFeedback(rnd.getLikeEventFeedback(event1.id, user2.id));\r",
                  "        const feedback2 = api.addEventFeedback(rnd.getLikeEventFeedback(event1.id, user1.id));\r",
                  "\r",
                  "        pm.collectionVariables.set(\"eid\", event1.id);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {\r",
                  "}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        // выполняем наш скрипт\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "},\r",
                  "    100\r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ответ должен быть длиною в 2 элемента\", function () {\r",
                  "    pm.expect(2).to.eql(pm.response.json().likes.length);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/feedbacks/ratings",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "feedbacks",
                "ratings"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "API = class {\r",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
          "        this.baseUrl = baseUrl;\r",
          "        this.pm = postman;\r",
          "        this._verbose = verbose;\r",
          "    }\r",
          "\r",
          "    async addUser(user, verbose = null) {\r",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCategory(category, verbose = null) {\r",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addEvent(userId, event, verbose = null) {\r",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCompilation(compilation, verbose = null) {\r",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addEventFeedback(feedback, verbose = null) {\r",
          "        return this.post(\"/events/feedbacks\", feedback, \"Ошибка при добавлении отзыва: \", verbose);\r",
          "    }\r",
          "\r",
          "    async publishParticipationRequest(eventId, userId, verbose = null) {\r",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
          "    }\r",
          "\r",
          "    async publishEvent(eventId, verbose = null) {\r",
          "        return this.patch('/admin/events/' + eventId, { stateAction: \"PUBLISH_EVENT\" }, \"Ошибка при публикации события\", verbose);\r",
          "    }\r",
          "\r",
          "    async rejectEvent(eventId, verbose = null) {\r",
          "        return this.patch('/admin/events/' + eventId, { stateAction: \"REJECT_EVENT\" }, \"Ошибка при отмене события\", verbose);\r",
          "    }\r",
          "\r",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose = null) {\r",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', { requestIds: [reqId], status: \"CONFIRMED\" }, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
          "    }\r",
          "\r",
          "    async findCategory(catId, verbose = null) {\r",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findCompilation(compId, verbose = null) {\r",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findEvent(eventId, verbose = null) {\r",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findUser(userId, verbose = null) {\r",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose = null) {\r",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose = null) {\r",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose = null) {\r",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
          "    }\r",
          "    async sendRequest(method, path, body = null, errorText = \"Ошибка при выполнении запроса: \", verbose = null) {\r",
          "        return new Promise((resolve, reject) => {\r",
          "            verbose = verbose == null ? this._verbose : verbose;\r",
          "            const request = {\r",
          "                url: this.baseUrl + path,\r",
          "                method: method,\r",
          "                body: body == null ? \"\" : JSON.stringify(body),\r",
          "                header: { \"Content-Type\": \"application/json\" },\r",
          "            };\r",
          "            if (verbose) {\r",
          "                console.log(\"Отправляю запрос: \", request);\r",
          "            }\r",
          "\r",
          "            try {\r",
          "                this.pm.sendRequest(request, (error, response) => {\r",
          "                    if (error || (response.code >= 400 && response.code <= 599)) {\r",
          "                        let err = error ? error : JSON.stringify(response.json());\r",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
          "                            \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" +\r",
          "                            \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
          "\r",
          "                        reject(new Error(errorText + err));\r",
          "                    }\r",
          "                    if (verbose) {\r",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
          "                    }\r",
          "                    if (response.stream.length === 0) {\r",
          "                        reject(new Error('Отправлено пустое тело ответа'))\r",
          "                    } else {\r",
          "                        resolve(response.json());\r",
          "                    }\r",
          "                });\r",
          "\r",
          "            } catch (err) {\r",
          "                if (verbose) {\r",
          "                    console.error(errorText, err);\r",
          "                }\r",
          "                return Promise.reject(err);\r",
          "            }\r",
          "        });\r",
          "    }\r",
          "};\r",
          "\r",
          "RandomUtils = class {\r",
          "    constructor() { }\r",
          "\r",
          "    getUser() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getCategory() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getEvent(categoryId) {\r",
          "        return {\r",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
          "            category: categoryId,\r",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
          "            eventDate: this.getFutureDateTime(),\r",
          "            location: {\r",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
          "            },\r",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
          "        }\r",
          "    }\r",
          "\r",
          "    getCompilation(...eventIds) {\r",
          "        return {\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            events: eventIds\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getEventFeedback(eventId, userId, feedback) {\r",
          "        return {\r",
          "            eventId: eventId,\r",
          "            userId: userId,\r",
          "            feedback: feedback\r",
          "        }\r",
          "    }\r",
          "\r",
          "    getLikeEventFeedback(eventId, userId) {\r",
          "        return this.getEventFeedback(eventId, userId, 'LIKE')\r",
          "    }\r",
          "\r",
          "    getDislikeEventFeedback(eventId, userId) {\r",
          "        return this.getEventFeedback(eventId, userId, 'DISLIKE')\r",
          "    }\r",
          "\r",
          "\r",
          "    getFutureDateTime(hourShift = 5, minuteShift = 0, yearShift = 0) {\r",
          "        let moment = require('moment');\r",
          "\r",
          "        let m = moment();\r",
          "        m.add(hourShift, 'hour');\r",
          "        m.add(minuteShift, 'minute');\r",
          "        m.add(yearShift, 'year');\r",
          "\r",
          "        return m.format('YYYY-MM-DD HH:mm:ss');\r",
          "    }\r",
          "\r",
          "    getWord(length = 1) {\r",
          "        let result = '';\r",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
          "        const charactersLength = characters.length;\r",
          "        let counter = 0;\r",
          "        while (counter < length) {\r",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
          "            counter += 1;\r",
          "        }\r",
          "        return result;\r",
          "    }\r",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "uid",
      "value": ""
    },
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "eid",
      "value": "0",
      "type": "string"
    }
  ]
}